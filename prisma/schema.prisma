// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
  binaryTargets        = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  userId           String            @unique
  imageUrl         String            @db.Text
  login            String?
  password         String
  token            String            @default(uuid())
  assistants       Assistant[]
  telegramBots     TelegramBot[]
  telegramUserBots TelegramUserBot[]
  whatsAppBot      WhatsAppBot[]
  jivoBot          JivoBot[]

  chats Chat[]

  expires   DateTime   @default(dbgenerated("ADDDATE(now(), 3)"))
  clients   Client[]
  operators Operator[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Assistant {
  id String @id @default(uuid())

  name     String
  settings String @db.Text

  use_count Int @default(0)

  token   String @default(uuid())
  comment String @db.Text

  imageUrl String @db.Text

  temperature Float @default(0.7)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  telegramBots     TelegramBot[]
  telegramUserBots TelegramUserBot[]
  whatsAppBot      WhatsAppBot[]
  jivoBot          JivoBot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chats Chat[]

  @@index([userId])
}

model TelegramBot {
  id          String @id @default(uuid())
  name        String @db.Text
  telegram_id String @db.Text
  imageUrl    String @db.Text
  useCount    Int    @default(0)
  token       String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  assistantId String?
  assistant   Assistant? @relation(fields: [assistantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([assistantId])
}

model TelegramUserBot {
  id String @id @default(uuid())

  firstName String @db.Text
  lastName  String @db.Text
  username  String @db.Text
  imageUrl  String @db.Text

  useCount Int @default(0)

  phone    String @db.Text
  api_id   String @db.Text
  api_hash String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  assistantId String
  assistant   Assistant @relation(fields: [assistantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([assistantId])
}

model WhatsAppBot {
  id       String @id @default(uuid())
  name     String @db.Text
  settings String @db.Text
  imageUrl String @db.Text

  useCount         Int    @default(0)
  fullName         String @db.Text
  phone            String @db.Text
  IdInstance       String @db.Text
  ApiTokenInstance String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  assistantId String
  assistant   Assistant @relation(fields: [assistantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([assistantId])
}

model JivoBot {
  id       String @id @default(uuid())
  name     String @db.Text
  settings String @db.Text
  imageUrl String @db.Text

  useCount Int    @default(0)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  assistantId String
  assistant   Assistant @relation(fields: [assistantId], references: [id])

  provider_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([assistantId])
}

enum ClientStatus {
  NOTREADY
  WAIT
  READY
  BOUGTH
}

enum ChannelType {
  TelegramBot
  TelegramUserBot
  WhatsAppBot
  JivoBot
}

enum OperatorRole {
  OWNER
  OPERATOR
  ASSISTANT
}

model Client {
  id String @id @default(uuid())

  name        String
  username    String?
  imageUrl    String?
  InChannelId String

  userId String
  user   User   @relation(fields: [userId], references: [id])
  Chat   Chat[]
}

model Operator {
  id       String  @id @default(uuid())
  name     String
  username String?

  imageUrl String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  Chats    Chat[]
  Messages Message[]

  @@index([userId])
}

model Chat {
  id String @id @default(uuid())

  channelType ChannelType

  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  assistantId String?
  assistant   Assistant? @relation(fields: [assistantId], references: [id])

  IsAssistantInChat Boolean @default(true)

  operatorId String?
  operator   Operator? @relation(fields: [operatorId], references: [id])

  messages Message[]
}

model Message {
  id String @id @default(uuid())

  content String  @db.Text
  fileUrl String?

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])

  fromClient    Boolean @default(true)
  fromAssistant Boolean @default(false)
  fromOperator  Boolean @default(false)

  operator   Operator? @relation(fields: [operatorId], references: [id])
  operatorId String?

  timestamp DateTime @default(now())
}
