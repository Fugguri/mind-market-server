// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-py"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  userId           String            @unique
  imageUrl         String            @db.Text
  login            String?
  password         String?
  token            String            @default(uuid())
  assistants       Assistant[]
  telegramBots     TelegramBot[]
  telegramUserBots TelegramUserBot[]
  whatsAppBot      WhatsAppBot[]
  jivoBot          JivoBot[]

  expires DateTime @default(dbgenerated("ADDDATE(now(), 3)"))
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}



model Profile {
  id               String            @id @default(uuid())
  userId           String            @unique
  name             String
  imageUrl         String            @db.Text
  login            String?
  password         String?
  email            String?           @db.Text
  token            String            @default(uuid())
  assistants       Assistant[]
  telegramBots     TelegramBot[]
  telegramUserBots TelegramUserBot[]
  whatsAppBot      WhatsAppBot[]
  jivoBot          JivoBot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expires DateTime @default(dbgenerated("ADDDATE(now(), 3)"))
}

model Assistant {
  id               String            @id @default(uuid())
  name             String
  settings         String            @db.Text
  use_count        Int               @default(0)
  comment          String            @db.Text
  token            String            @default(uuid())
  imageUrl         String            @db.Text
  temperature      Float             @default(0.7)
  profileId        String
  profile          Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  telegramBots     TelegramBot[]
  telegramUserBots TelegramUserBot[]
  whatsAppBot      WhatsAppBot[]
  jivoBot          JivoBot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId,userId])
}

model TelegramBot {
  id          String @id @default(uuid())
  name        String @db.Text
  telegram_id String @db.Text
  imageUrl    String @db.Text
  useCount    Int    @default(0)
  token       String @db.Text

  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  profileId   String
  assistantId String?

  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  assistant Assistant? @relation(fields: [assistantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId,userId])
  @@index([assistantId])
}

model TelegramUserBot {
  id        String @id @default(uuid())
  firstName String @db.Text
  lastName  String @db.Text
  username  String @db.Text
  imageUrl  String @db.Text
  useCount  Int    @default(0)
  phone     String @db.Text
  api_id    String @db.Text
  api_hash  String @db.Text

  profileId   String
  assistantId String

  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  assistant Assistant @relation(fields: [assistantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId,userId])
  @@index([assistantId])
}

model WhatsAppBot {
  id       String @id @default(uuid())
  name     String @db.Text
  settings String @db.Text
  imageUrl String @db.Text

  useCount         Int    @default(0)
  fullName         String @db.Text
  phone            String @db.Text
  IdInstance       String @db.Text
  ApiTokenInstance String @db.Text

  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  assistantId String
  assistant   Assistant @relation(fields: [assistantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId,userId])
  @@index([assistantId])
}

model JivoBot {
  id       String @id @default(uuid())
  name     String @db.Text
  settings String @db.Text
  imageUrl String @db.Text

  profileId   String
  useCount    Int    @default(0)
  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  provider_id String @db.Text

  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  assistantId String
  assistant   Assistant @relation(fields: [assistantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId,userId])
  @@index([assistantId])
}
